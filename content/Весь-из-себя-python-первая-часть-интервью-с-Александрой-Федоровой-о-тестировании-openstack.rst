.. title: "Весь из себя Python" - первая часть интервью с Александрой Федоровой о тестировании OpenStack
.. slug: Весь-из-себя-python-первая-часть-интервью-с-Александрой-Федоровой-о-тестировании-openstack
.. date: 2016-06-06 14:47:36
.. tags:
.. category:
.. link:
.. description:
.. type: text
.. author: Peter Lemenkov

**Это архивная статья**


| В корпоративном блоге компании "Мирантис" опубликовали `первую часть
  интервью <https://www.mirantis.ru/company-news/news-company/ves-iz-sebya-python/>`__
  с с Александрой Федоровой о тестировании OpenStack:

    .. rubric:: Весь из себя Python
       :name: весь-из-себя-python

        Реплика Александры Федоровой, руководителя команды CI (Москва,
        Россия).


    |Весь из себя Python|

    .. rubric:: От редакции
       :name: от-редакции

    Когда мы решили регулярно публиковать обновления в корпоративном
    аккаунте в `Facebook на русском
    языке <https://www.facebook.com/MirantisIT/>`__, то лелеяли надежду,
    что аудитория, заинтересованная в OpenStack-теме, начнет
    разговаривать с нами. И вот, это произошло! Мы начали получать
    вопросы от читателей. И это очень, очень важно для нас! Пожалуйста,
    не останавливайтесь!

    Вопрос, ответ на который мы подготовили сегодня, касается
    тестирования и звучит следующим образом:

        Можете ли вы описать в общих чертах процесс тестирования на
        Python ваших продуктов OpenStack, так как очень сложно
        разобраться в взаимосвязях их отдельных элементов.


    Для первой беседы на тему тестирования мы пригласили Александру
    Федорову, руководителя команды CI из московского офиса нашей
    компании. И вот что она рассказала…

    .. rubric:: Виды тестирования, применяемые в OpenStack
       :name: виды-тестирования-применяемые-в-openstack

    OpenStack — это много разных Python-проектов. Каждый проект
    тестируется на нескольких уровнях. Если точнее — на четырех:

    -  `unit-тесты <https://habrahabr.ru/post/169381/>`__ (или модульные
       тесты),
    -  `функциональные
       тесты <https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5>`__,
    -  `интеграционные
       тесты <https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5>`__
    -  и `системные
       тесты <https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5>`__.


    Начнем по порядку. Специфика OpenStack в том, что это набор из
    большого числа достаточно независимых проектов. У `каждого
    проекта <https://www.openstack.org/software/project-navigator/>`__
    есть свой фреймворк для unit-тестов. Функциональные тесты так же,
    как unit-тесты, связаны с особенностями использования того или иного
    сервиса. Управляются и автоматизируются эти тесты, опять же, на
    уровне одного конкретного проекта. Для Python-кода при этом
    используется стандартный подход запуска кода в tox-окружении.


    Интеграционные тесты позволяют протестировать совместную работу
    нескольких проектов. Для этого принято использовать так называемый
    Devstack — написанный на Bash фреймворк для деплоймента базового
    OpenStack-окружения. На развернутом окружении далее прогоняется
    Python-based
    `Tempest <http://docs.openstack.org/developer/tempest/>`__
    framework, он и позволяет тестировать сценарии взаимодействия между
    разными сервисами экосистемы OpenStack. Например, для создания
    compute-ноды нужно авторизоваться в Keystone, получить базовый образ
    из Glance и IP-адрес из Neutron.


        Длинные цепочки взаимодействия между сервисами тестируются в
        апстриме на девелоперском окружении
        (`DevStack <https://wiki.openstack.org/wiki/DevStack>`__), с
        помощью Tempest.


    .. rubric:: Нет ли конкуренции между фреймворками Tempest и Rally
       внутри экосистемы OpenStack?
       :name: нет-ли-конкуренции-между-фреймворками-tempest-и-rally-внутри-экосистемы-openstack

    Нет, сейчас эти два проекта сотрудничают друг с другом. Rally
    отвечает за
    `бенчмарк-тестирование <https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82_%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8>`__
    (или проверку производительности системы) и `нагрузочное
    тестирование <https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BE%D1%87%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5>`__.

    Tempest — это про сценарии, про логику взаимодействия между
    сервисами, а Rally — про нагрузку: что произойдет, если я “прогоню”
    этот сценарий 100500 раз? Сколько времени это займет? Часто
    тестировщики “гоняют” Rally поверх Tempest. Или используют Tempest
    как Rally-case.


        Итак, модульные, функциональные и интеграционные тесты есть в
        апстриме. Остальное — фреймворки системных тестов.


    .. rubric:: Фреймворки системных тестов
       :name: фреймворки-системных-тестов

    |Весь из себя Python-02|

    Почему это специфично было для
    `Fuel <https://www.mirantis.ru/products/mirantis-openstack-software/openstack-deployment-fuel/>`__?
    Потому что Fuel — это сервис развертывания OpenStack, и мы тестируем
    не просто сервисы и их работу друг с другом, а проверяем полный
    цикл, от установки управляющей Fuel-ноды на «пустой» сервер,
    предоставления доступа к OpenStack Dashboard, проигрывания типичных
    сценариев работы с облаком, до апгрейда кластера. Еще тестируем
    отдельно много разнообразных сценариев установки.


    В апстриме DevStack предполагает довольно однообразное базовое
    девелоперское развертывание OpenStack: на одной ноде разворачиваются
    все сервисы, каждый из которых получает собственную screen-сессию,
    где разработчик может интерактивно выполнять какие-то операции,
    смотреть лог или даже патчить код «наживую». Во Fuel поддерживается
    установка OpenStack в HA-режиме с несколькими контроллерами, с
    разнообразными конфигурациями сети. Это тестирование более «тяжелое»
    — базовый системный тест занимает около полутора часов на
    «стандартном» bare-metal сервере.


    Для системных тестов опять используется фреймворк, основанный на
    Python, который состоит из двух частей: `Fuel
    devops <https://github.com/openstack/fuel-devops>`__, который
    готовит окружение из 5-10 виртуальных машин, и `Fuel
    QA <https://github.com/openstack/fuel-qa>`__ — тестовый фреймворк на
    базе Proboscis, в котором, собственно, содержится вся логика
    тестовых сценариев и реализация работы с Fuel и OpenStack.


    .. rubric:: Человек готовится к собеседованию в Mirantis: что ему
       нужно знать о тестировании?
       :name: человек-готовится-к-собеседованию-в-mirantis-что-ему-нужно-знать-о-тестировании

    С моей точки зрения, у нас QA-процессы построены на многих
    взаимодействиях с низкоуровневыми вещами. Например, процесс создает
    виртуальные машины, делает запрос к низкоуровневому API, “ходит” по
    серверам… Это не чисто python-в-себе. Из него всегда есть выходы на
    какие-то системные или OpenStack-сервисы. То есть ты не можешь
    ограничиваться только знанием python-фреймворка, нужна хорошая база.

    Но основные принципы те же. Возьмем, например, `nose test
    фреймворк <http://pythontesting.net/framework/nose/nose-introduction/>`__:
    тест-кейсы, настройка начального окружения, реверт к стандартному
    окружению, зависимости… Но наполнение каждого из этих шагов может
    быть нестандартным для классической python-разработки, потому что
    всегда есть “хвосты” наружу, которые смотрят из Python и дергают
    что-то еще…

    .. rubric:: Продолжение следует!
       :name: продолжение-следует

.. |Весь из себя Python| image:: https://www.mirantis.ru/wp-content/uploads/2016/05/Alexandra_PythonTests-01.jpg
   :class: img-responsive aligncenter
.. |Весь из себя Python-02| image:: https://www.mirantis.ru/wp-content/uploads/2016/05/Alexandra_PythonTests-02.jpg
   :class: img-responsive aligncenter

