.. title: "Бинарные логи" в ядре
.. slug: Бинарные-логи-в-ядре
.. date: 2012-04-14 17:28:35
.. tags:
.. category:
.. link:
.. description:
.. type: text
.. author: Peter Lemenkov

**Это архивная статья**


Продолжаем тему о `структурированном
журналировании </content/lumberjack-%D0%B8%D0%BB%D0%B8-%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5-%D0%B6%D1%83%D1%80%D0%BD%D0%B0%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5>`__.

`Jonathan
Corbet <https://plus.google.com/104175436979387006170/posts>`__ пишет на
LWN, что `систему журналирования ядра Linux вскоре ожидают сильные
изменения <http://lwn.net/Articles/492125/>`__ (к сожалению, статья за
paywall). Разработчик udev и systemd `Kay
Sievers <https://www.openhub.net/accounts/kaysievers>`__ предложил
`радикально
изменить <https://thread.gmane.org/gmane.linux.kernel/1277619>`__
поведение журналируемой подсистемы ядра.

Напомню, какова-же одна из проблем, которую решает проект
`Lumberjack <https://fedorahosted.org/lumberjack/>`__. Изначально, из-за
малого количества разработчиков и недоговоренности о стандартах, было
решено, что журнал будет содержать просто текстовые строчки сообщений
(например, *"[system] Successfully activated service
'org.freedesktop.PolicyKit1'"*). Человек в них может узнать о каких-то
событиях, но роботы-то читать не умеют! Им нужна заранее заданная
структура сообщений, возможно, что и не человекочитаемая (так напугавшие
всех "бинарные логи"), и поэтому каждый или почти каждый сисадмин имеет
свои скриптики, которые приходится постоянно переписывать, чтоб
извлекать какие-то данные из журнала. Было предложено ввести
структурирование журнала - отделить человеко-читаемые данные от тех, что
нужны роботам. На уровне user-space это вылилось в проект
`Lumberjack <https://fedorahosted.org/lumberjack/>`__, и, видимо, стоит
ожидать скорого повсеместного внедрения "бинарных логов" в дистрибутивы.

К сожалению, в ядре до сих пор журнал ведется с помощью произвольно
сформированных строк текста.

Предложение Kay Sievers содержит три пункта. Первое, это вести журнал
внутри ядра не в виде некоего буфера фиксированной длины, а в виде
очереди объектов. Это даже немного сэкономит память в ряде случаев и
поможет предотвратить повреждение сообщений при переполнении очереди
(сейчас просто перезаписывается память, занятая старыми сообщениями, что
приводило к повреждению некоторых перед отправкой в логгер, работающий
на уровне пользователя). Второе, это возможность присовокупить некоего
KV-словаря к каждому сообщению (это и есть то самое, что будет читаться
роботами - systemd, rsyslog, syslog-ng и т.п.). И, наконец, третье, это
радикальное изменение поведения */dev/kmsg*. Сейчас, максимум, на что
оно годно, это для добавления своего сообщения к журналу событий ядра.

Sievers переработал его так, что из него можно будет читать ленту
событий ядра программами типа *cat* и *less*. Поддерживается
одновременное чтение событий несколькими источниками. Таким образом, это
устройство становится основным источником событий ядра, которое будет
удобно разбирать, и которое будет гарантированно доставлять сообщения в
целости или сообщать, что некое-количество сообщений было потеряно.

В целом изменение благосклонно встречено kernel-хакерами. Даже Linus
Torvalds высказался одобрительно. Стоит ожидать частичного появления
этой функциональности в ядре 3.4, и окончательного - в ядре 3.5.
