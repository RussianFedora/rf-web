.. title: Первые последствия дырявого bash
.. slug: Первые-последствия-дырявого-bash
.. date: 2014-09-26 09:42:25
.. tags:
.. category:
.. link:
.. description:
.. type: text
.. author: Peter Lemenkov

**Это архивная статья**


Не прошло и пары суток, а `дыру в bash </content/Дыра-в-bash>`__ начали
`успешно использовать <http://roem.ru/2014/09/26/finale108213/>`__.

Проблема, конечно, гораздо больше, чем некое дырявое приложение. Она
обладает корнями, глубоко уходящими в недра религии юниксвэя. Мы
неоднократно говорили, что склеивать бинарнички с помощью пайпов, в
которых передается неструктурированная текстовая информация, это дикость
из археологических глубин ранних юниксов. `Мы предлагали и модернизацию
pipes </content/Предложены-радикальные-изменения-в-работу-unix-pipes>`__,
и постоянно рассказываем о необходимости переводить
текст-ориентированные системы на бинарные (например,
`раз </content/lumberjack-или-структурированное-журналирование>`__ и
`два) </content/Бинарные-логи-и-один-интересный-аспект>`__, и уж
разумеется наши коллеги всегда отстаивали порочность юниксвэйного
запуска приложений из других приложений, и последующего анализа
текстового вывода (например, довольно радикальная `презентация с Linux
Plumber Conference
2012 <http://groveronline.com/wp-content/uploads/2014/09/all-plumbing-needs-an-api.pdf>`__
нашего коллеги `Andy Grover <https://openhub.net/accounts/agrover>`__).

Мы продолжаем отстаивать точку зрения, что весь этот [STRIKEOUT:цирк со
злыми клоунами] юниксвэй необходимо заменить на сильно связанные, но
работающие независимо (компоненты systemd, приложения D-Bus) и
изолированно (SELinux, cgroups и т.п.) приложения, общающиеся с помощью
стандартизированных бинарных сообщений (JSON,
`GVariant <https://developer.gnome.org/glib/stable/glib-GVariant.html#GVariant>`__,
BSON, Bencode, XML, да что угодно) по стандартной шине данных (D-Bus /
`kdbus </content/Перенос-d-bus-в-ядро-linux>`__), и события которых
оперативно заносятся в базу данных событий системы (Journald). Это то,
что называется платформа Linux, и то, к чему мы весь мир опенсорса
потихоньку ведем.

Напоследок рекомендуем прочитать `своевременный пост от Dan
Walsh <https://danwalsh.livejournal.com/71122.html>`__, в котором он
объясняет, почему SELinux не блокирует проблему, и как он минимизирует
ущерб. Вкратце, у кого SELinux включен, у того ошибка будет изолирована,
и злоумышленник не сможет похитить ваши данные, хотя и сможет
использовать ваш компьютер, а вот у кого выключен (`у волосатых
дикарей-троглодитов </content/dan-walsh-не-рекомендует-audit2allow-m>`__),
у тех злоумышленник получит полноценный доступ к вашей машинке. `Такие
дела <https://lurkmore.to/Такие_дела>`__.

